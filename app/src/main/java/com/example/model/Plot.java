package com.example.model;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PLOT".
 */
public class Plot {

    private Long id;
    private String url;
    private Integer parcel;
    private Integer project;
    private String name;
    private String default_aeq;
    private Boolean calculate_by_species;
    private String region;
    private Float root_to_shoot_ratio;
    private String mapped_dimensions;
    private String reported_dimensions;
    private String center_point_type;
    private Double cp_coord_latitude;
    private Double cp_coord_longitude;
    private Short reported_shape;
    private Short mapped_shape;
    private Boolean has_soil_data;
    private Boolean has_biomass_data;
    private Boolean has_deadwood_data;
    private Boolean has_litter_data;
    private Float mapped_area;
    private Float reported_area;
    private Float area;
    private Integer tree_species_count;
    private Integer tree_count;
    private String fileName;
    private String image_file_path;
    private String photo_direction;
    private java.util.Date photo_date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlotDao myDao;

    private List<aeq> aeq;

    public Plot() {
    }

    public Plot(Long id) {
        this.id = id;
    }

    public Plot(Long id, String url, Integer parcel, Integer project, String name, String default_aeq, Boolean calculate_by_species, String region, Float root_to_shoot_ratio, String mapped_dimensions, String reported_dimensions, String center_point_type, Double cp_coord_latitude, Double cp_coord_longitude, Short reported_shape, Short mapped_shape, Boolean has_soil_data, Boolean has_biomass_data, Boolean has_deadwood_data, Boolean has_litter_data, Float mapped_area, Float reported_area, Float area, Integer tree_species_count, Integer tree_count, String fileName, String image_file_path, String photo_direction, java.util.Date photo_date) {
        this.id = id;
        this.url = url;
        this.parcel = parcel;
        this.project = project;
        this.name = name;
        this.default_aeq = default_aeq;
        this.calculate_by_species = calculate_by_species;
        this.region = region;
        this.root_to_shoot_ratio = root_to_shoot_ratio;
        this.mapped_dimensions = mapped_dimensions;
        this.reported_dimensions = reported_dimensions;
        this.center_point_type = center_point_type;
        this.cp_coord_latitude = cp_coord_latitude;
        this.cp_coord_longitude = cp_coord_longitude;
        this.reported_shape = reported_shape;
        this.mapped_shape = mapped_shape;
        this.has_soil_data = has_soil_data;
        this.has_biomass_data = has_biomass_data;
        this.has_deadwood_data = has_deadwood_data;
        this.has_litter_data = has_litter_data;
        this.mapped_area = mapped_area;
        this.reported_area = reported_area;
        this.area = area;
        this.tree_species_count = tree_species_count;
        this.tree_count = tree_count;
        this.fileName = fileName;
        this.image_file_path = image_file_path;
        this.photo_direction = photo_direction;
        this.photo_date = photo_date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlotDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Integer getParcel() {
        return parcel;
    }

    public void setParcel(Integer parcel) {
        this.parcel = parcel;
    }

    public Integer getProject() {
        return project;
    }

    public void setProject(Integer project) {
        this.project = project;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDefault_aeq() {
        return default_aeq;
    }

    public void setDefault_aeq(String default_aeq) {
        this.default_aeq = default_aeq;
    }

    public Boolean getCalculate_by_species() {
        return calculate_by_species;
    }

    public void setCalculate_by_species(Boolean calculate_by_species) {
        this.calculate_by_species = calculate_by_species;
    }

    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        this.region = region;
    }

    public Float getRoot_to_shoot_ratio() {
        return root_to_shoot_ratio;
    }

    public void setRoot_to_shoot_ratio(Float root_to_shoot_ratio) {
        this.root_to_shoot_ratio = root_to_shoot_ratio;
    }

    public String getMapped_dimensions() {
        return mapped_dimensions;
    }

    public void setMapped_dimensions(String mapped_dimensions) {
        this.mapped_dimensions = mapped_dimensions;
    }

    public String getReported_dimensions() {
        return reported_dimensions;
    }

    public void setReported_dimensions(String reported_dimensions) {
        this.reported_dimensions = reported_dimensions;
    }

    public String getCenter_point_type() {
        return center_point_type;
    }

    public void setCenter_point_type(String center_point_type) {
        this.center_point_type = center_point_type;
    }

    public Double getCp_coord_latitude() {
        return cp_coord_latitude;
    }

    public void setCp_coord_latitude(Double cp_coord_latitude) {
        this.cp_coord_latitude = cp_coord_latitude;
    }

    public Double getCp_coord_longitude() {
        return cp_coord_longitude;
    }

    public void setCp_coord_longitude(Double cp_coord_longitude) {
        this.cp_coord_longitude = cp_coord_longitude;
    }

    public Short getReported_shape() {
        return reported_shape;
    }

    public void setReported_shape(Short reported_shape) {
        this.reported_shape = reported_shape;
    }

    public Short getMapped_shape() {
        return mapped_shape;
    }

    public void setMapped_shape(Short mapped_shape) {
        this.mapped_shape = mapped_shape;
    }

    public Boolean getHas_soil_data() {
        return has_soil_data;
    }

    public void setHas_soil_data(Boolean has_soil_data) {
        this.has_soil_data = has_soil_data;
    }

    public Boolean getHas_biomass_data() {
        return has_biomass_data;
    }

    public void setHas_biomass_data(Boolean has_biomass_data) {
        this.has_biomass_data = has_biomass_data;
    }

    public Boolean getHas_deadwood_data() {
        return has_deadwood_data;
    }

    public void setHas_deadwood_data(Boolean has_deadwood_data) {
        this.has_deadwood_data = has_deadwood_data;
    }

    public Boolean getHas_litter_data() {
        return has_litter_data;
    }

    public void setHas_litter_data(Boolean has_litter_data) {
        this.has_litter_data = has_litter_data;
    }

    public Float getMapped_area() {
        return mapped_area;
    }

    public void setMapped_area(Float mapped_area) {
        this.mapped_area = mapped_area;
    }

    public Float getReported_area() {
        return reported_area;
    }

    public void setReported_area(Float reported_area) {
        this.reported_area = reported_area;
    }

    public Float getArea() {
        return area;
    }

    public void setArea(Float area) {
        this.area = area;
    }

    public Integer getTree_species_count() {
        return tree_species_count;
    }

    public void setTree_species_count(Integer tree_species_count) {
        this.tree_species_count = tree_species_count;
    }

    public Integer getTree_count() {
        return tree_count;
    }

    public void setTree_count(Integer tree_count) {
        this.tree_count = tree_count;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getImage_file_path() {
        return image_file_path;
    }

    public void setImage_file_path(String image_file_path) {
        this.image_file_path = image_file_path;
    }

    public String getPhoto_direction() {
        return photo_direction;
    }

    public void setPhoto_direction(String photo_direction) {
        this.photo_direction = photo_direction;
    }

    public java.util.Date getPhoto_date() {
        return photo_date;
    }

    public void setPhoto_date(java.util.Date photo_date) {
        this.photo_date = photo_date;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<aeq> getAeq() {
        if (aeq == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            aeqDao targetDao = daoSession.getAeqDao();
            List<aeq> aeqNew = targetDao._queryPlot_Aeq(id);
            synchronized (this) {
                if(aeq == null) {
                    aeq = aeqNew;
                }
            }
        }
        return aeq;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAeq() {
        aeq = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
